From e1bfac2c9e2a51bd2e6eebbdabfc159fad87515a Mon Sep 17 00:00:00 2001
From: Wendall Cada <wendallc@apache.org>
Date: Fri, 5 Apr 2013 11:45:18 -0700
Subject: [PATCH 1/6] Added supplementary functions for running tests from
 command line.

---
 test/javascript/test_setup.js | 89 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 89 insertions(+)
 create mode 100644 test/javascript/test_setup.js

diff --git a/test/javascript/test_setup.js b/test/javascript/test_setup.js
new file mode 100644
index 0000000..9347455
--- /dev/null
+++ b/test/javascript/test_setup.js
@@ -0,0 +1,89 @@
+// Licensed under the Apache License, Version 2.0 (the "License"); you may not
+// use this file except in compliance with the License. You may obtain a copy of
+// the License at
+//
+//   http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+// License for the specific language governing permissions and limitations under
+// the License.
+
+/*
+ * Add global couchTests object required for existing tests.
+ */
+var couchTests = {}; 
+
+var console = { 
+  log: function(arg) {
+    var msg = (arg.toString()).replace(/\n/g, "\n    ");
+    print(msg, true);
+  }
+};
+
+var fmtStack = function(stack) {
+  if(!stack) {
+    console.log("No stack information");
+    return;
+  }
+  console.log("Trace back (most recent call first):\n");
+  var re = new RegExp("(.*?)@([^:]*):(.*)$");
+  var lines = stack.split("\n");
+  for(var i = 0; i < lines.length; i++) {
+    var line = lines[i];
+    if(!line.length) continue;
+    var match = re.exec(line);
+    if(!match) continue
+    var match = re.exec(line);
+    if(!match) continue
+    var source = match[1].substr(0, 70);
+    var file = match[2];
+    var lnum = match[3];
+    while(lnum.length < 3) lnum = " " + lnum;
+    console.log(" " + lnum + ": " + file);
+    console.log("      " + source);
+  }
+} 
+
+function T(arg1, arg2) {
+  if(!arg1) {
+    var result = (arg2 ? arg2 : arg1);
+    throw((result instanceof Error ? result : Error(result)));
+  }
+} 
+
+function waitForSuccess(fun, tag) {
+  var start = new Date().getTime();
+  var complete = false;
+  
+  while (!complete) {
+    var now = new Date().getTime();
+    if (now > start + 5000) {
+      complete = true;
+      print('FAIL');
+      print(tag);
+      quit(1);
+    }
+    try {
+      while (new Date().getTime() < now + 500);
+      complete = fun();
+    } catch (e) {}
+  }
+}
+
+function restartServer() {
+  print('restart');
+  var start = new Date().getTime();
+  while (new Date().getTime() < start + 1000);
+  waitForSuccess(CouchDB.isRunning, 'restart');
+}
+
+/*
+ * If last_req is an object, we got something back. This might be an error, but
+ * CouchDB is up and running!
+ */
+CouchDB.isRunning = function() {
+  CouchDB.last_req = CouchDB.request("GET", "/");
+  return typeof CouchDB.last_req == 'object';
+};
-- 
1.8.1.4


From 6bbb1cc06ddad4b35cb55c2a73e4f269eb06a0ec Mon Sep 17 00:00:00 2001
From: Wendall Cada <wendallc@apache.org>
Date: Fri, 5 Apr 2013 11:43:46 -0700
Subject: [PATCH 2/6] Remove setup functions from test runner, only allow a
 single test to be run at a time.

---
 test/javascript/cli_runner.js | 84 ++++++++++++-------------------------------
 1 file changed, 23 insertions(+), 61 deletions(-)

diff --git a/test/javascript/cli_runner.js b/test/javascript/cli_runner.js
index fcb4633..e8ebd2e 100644
--- a/test/javascript/cli_runner.js
+++ b/test/javascript/cli_runner.js
@@ -9,77 +9,39 @@
 // WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 // License for the specific language governing permissions and limitations under
 // the License.
+//
 
-var console = {
-  log: function(arg) {
-    var msg = (arg.toString()).replace(/\n/g, "\n    ");
-    print(msg, true);
-  }
-};
+/*
+ * Futon test suite was designed to be able to run all tests populated into
+ * couchTests. Here we should only be loading one test, so we'll pop the first
+ * test off the list and run the test. If more than one item is loaded in the
+ * test object, return an error.
+ */
+function runTest() {
+  var count = 0;
+  var start = new Date().getTime();
 
-var fmtStack = function(stack) {
-  if(!stack) {
-    console.log("No stack information");
-    return;
-  }
-  console.log("Trace back (most recent call first):\n");
-  var re = new RegExp("(.*?)@([^:]*):(.*)$");
-  var lines = stack.split("\n");
-  for(var i = 0; i < lines.length; i++) {
-    var line = lines[i];
-    if(!line.length) continue;
-    var match = re.exec(line);
-    if(!match) continue
-    var source = match[1].substr(0, 70);
-    var file = match[2];
-    var lnum = match[3];
-    while(lnum.length < 3) lnum = " " + lnum;
-    console.log(" " + lnum + ": " + file);
-    console.log("      " + source);
+  for(var name in couchTests) {
+      count++;
   }
-}
-
 
-function T(arg1, arg2) {
-  if(!arg1) {
-    var result = (arg2 ? arg2 : arg1);
-    throw((result instanceof Error ? result : Error(result)));
+  if (count !== 1) {
+      console.log('Only one test per file is allowed.');
+      quit(1);
   }
-}
 
-function runTestConsole(num, name, func) {
-  var passed = false;
   try {
-    func();
-    passed = true;
-    print("ok " + num + " " + name);
+    // Add artificial wait for each test of 1 sec
+    while (new Date().getTime() < start + 1200);
+    couchTests[name]();
+    print('OK');
   } catch(e) {
-    print("not ok " + num + " " + name);
-    console.log("Reason: " + e.message);
+    console.log("FAIL\nReason: " + e.message);
     fmtStack(e.stack);
+    quit(1);
   }
-  return passed;
 }
 
-function runAllTestsConsole() {
-  var numTests = 0;
-  var numPassed = 0;
-  for(var t in couchTests) { numTests += 1; }
-  print("1.." + numTests);
-  var testId = 0;
-  for(var t in couchTests) {
-    testId += 1;
-    if(runTestConsole(testId, t, couchTests[t])) {
-      numPassed++;
-    }
-  }
-  if(numPassed != numTests) {
-    console.log("Test failures: " + (numTests - numPassed));
-    quit(1);
-  } else {
-    console.log("All tests passed");
-  }
-};
+waitForSuccess(CouchDB.isRunning, 'isRunning');
 
-waitForSuccess(CouchDB.getVersion);
-runAllTestsConsole();
+runTest();
-- 
1.8.1.4


From 0208778c044046947b0f8a10e240872c02ad7643 Mon Sep 17 00:00:00 2001
From: Wendall Cada <wendallc@apache.org>
Date: Fri, 5 Apr 2013 11:41:40 -0700
Subject: [PATCH 3/6] PUT call to database that is not guaranted to exist.

---
 share/www/script/test/rev_stemming.js | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/share/www/script/test/rev_stemming.js b/share/www/script/test/rev_stemming.js
index 3e36f96..954da79 100644
--- a/share/www/script/test/rev_stemming.js
+++ b/share/www/script/test/rev_stemming.js
@@ -11,6 +11,9 @@
 // the License.
 
 couchTests.rev_stemming = function(debug) {
+  var db = new CouchDB("test_suite_db", {"X-Couch-Full-Commit":"false"});
+  db.deleteDb();
+  db.createDb();
   var db = new CouchDB("test_suite_db_a", {"X-Couch-Full-Commit":"false"});
   db.deleteDb();
   db.createDb();
-- 
1.8.1.4


From 9838eef739b1522cb60399e4a15024213f18a5b9 Mon Sep 17 00:00:00 2001
From: Wendall Cada <wendallc@apache.org>
Date: Tue, 9 Apr 2013 18:45:16 -0700
Subject: [PATCH 4/6] Refactor javascript runner script to handle couchdb
 restarts. Single interpreter per test.

---
 test/javascript/run.tpl | 115 ++++++++++++++++++++++++++++++++----------------
 1 file changed, 76 insertions(+), 39 deletions(-)

diff --git a/test/javascript/run.tpl b/test/javascript/run.tpl
index 647a29a..5b1e075 100644
--- a/test/javascript/run.tpl
+++ b/test/javascript/run.tpl
@@ -27,9 +27,82 @@ if [ -z "$MAKE" ]; then
     MAKE=make
 fi
 
+trap 'abort' EXIT INT
+
+start() {
+	./utils/run -b -r 0 -n \
+		-a $BUILD_DIR/etc/couchdb/default_dev.ini \
+		-a $SRC_DIR/test/random_port.ini \
+		-a $BUILD_DIR/etc/couchdb/local_dev.ini 1>/dev/null
+}
+
+stop() {
+    ./utils/run -d 1>/dev/null
+}
+
+restart() {
+    stop
+    start
+}
+
+abort() {
+    trap - 0
+    stop
+    exit 2
+}
+
+process_response() {
+    while read data
+    do
+        if [ $data = 'restart' ];
+        then
+            restart
+        else
+            echo "$data"
+        fi
+    done
+}
+
+run() {
+    # start the tests
+    echo -n "$1 ... "
+    $COUCHJS -H -u $COUCH_URI_FILE \
+        $SCRIPT_DIR/json2.js \
+        $SCRIPT_DIR/sha1.js \
+        $SCRIPT_DIR/oauth.js \
+        $SCRIPT_DIR/couch.js \
+        $SCRIPT_DIR/couch_test_runner.js \
+        $JS_TEST_DIR/couch_http.js \
+        $JS_TEST_DIR/test_setup.js \
+        $1 \
+        $JS_TEST_DIR/cli_runner.js | process_response
+
+    if [ -z $RESULT ]; then
+        RESULT=$?
+    elif [ "$?" -eq 1 ]; then
+        RESULT=$?
+    fi
+
+}
+
+# start CouchDB
+if [ -z $COUCHDB_NO_START ]; then
+    $MAKE dev
+    start
+fi
+
+echo "Running javascript tests ..."
+
 if [ "$#" -eq 0 ];
 then
-    TEST_SRC="$SCRIPT_DIR/test/*.js"
+    COUNTER=1
+    FILES=($SCRIPT_DIR/test/*.js)
+    for TEST_SRC in "${FILES[@]}"
+    do
+        echo -n "$COUNTER/${#FILES[@]} " 
+        let COUNTER=COUNTER+1
+        run $TEST_SRC
+    done
 else
     TEST_SRC="$1"
     if [ ! -f $TEST_SRC ]; then
@@ -40,46 +113,10 @@ else
                 echo "file $1 does not exist"
                 exit 1
             fi
+            run $TEST_SRC
         fi
     fi
 fi
 
-# stop CouchDB on exit from various signals
-abort() {
-    trap - 0
-    ./utils/run -d
-    exit 2
-}
-
-# start CouchDB
-if [ -z $COUCHDB_NO_START ]; then
-    $MAKE dev
-    trap 'abort' EXIT INT
-	./utils/run -b -r 1 -n \
-		-a $BUILD_DIR/etc/couchdb/default_dev.ini \
-		-a $SRC_DIR/test/random_port.ini \
-		-a $BUILD_DIR/etc/couchdb/local_dev.ini
-	sleep 1 # give it a sec
-fi
-
-# start the tests
-$COUCHJS -H -u $COUCH_URI_FILE \
-	$SCRIPT_DIR/json2.js \
-	$SCRIPT_DIR/sha1.js \
-	$SCRIPT_DIR/oauth.js \
-	$SCRIPT_DIR/couch.js \
-	$SCRIPT_DIR/couch_test_runner.js \
-	$SCRIPT_DIR/couch_tests.js \
-	$TEST_SRC \
-	$JS_TEST_DIR/couch_http.js \
-	$JS_TEST_DIR/cli_runner.js
-
-RESULT=$?
-
-if [ -z $COUCHDB_NO_START ]; then
-    # stop CouchDB
-    ./utils/run -d
-    trap - 0
-fi
-
+trap - 0
 exit $RESULT
-- 
1.8.1.4


From 37341af82ad37a2dfddc5b7e8cd4b46085101901 Mon Sep 17 00:00:00 2001
From: Wendall Cada <wendallc@apache.org>
Date: Tue, 9 Apr 2013 18:46:30 -0700
Subject: [PATCH 5/6] Add return value to waitForSuccess method.

---
 share/www/script/test/oauth.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/share/www/script/test/oauth.js b/share/www/script/test/oauth.js
index 89d3779..9199cd0 100644
--- a/share/www/script/test/oauth.js
+++ b/share/www/script/test/oauth.js
@@ -108,6 +108,7 @@ couchTests.oauth = function(debug) {
         if (xhr.responseText.indexOf("\"-pbkdf2-") != 0) {
             throw("still waiting");
         }
+        return true;
       }, "wait-for-admin");
 
       CouchDB.newUuids(2); // so we have one to make the salt
-- 
1.8.1.4


From 5e64395e08101ac090d338e9b8a9e468fd886145 Mon Sep 17 00:00:00 2001
From: Wendall Cada <wendallc@apache.org>
Date: Tue, 9 Apr 2013 18:48:08 -0700
Subject: [PATCH 6/6] Stop couchdb test server instance after javascript tests
 complete.

---
 test/javascript/run.tpl | 1 +
 1 file changed, 1 insertion(+)

diff --git a/test/javascript/run.tpl b/test/javascript/run.tpl
index 5b1e075..3736bec 100644
--- a/test/javascript/run.tpl
+++ b/test/javascript/run.tpl
@@ -118,5 +118,6 @@ else
     fi
 fi
 
+stop
 trap - 0
 exit $RESULT
-- 
1.8.1.4

